{
    "allocpages": {
        "exclusives": [
            ["all", "cellno"]
        ],
        "result_patterns": [
            "/sys/kernel/mm/hugepages/hugepages-${pagesize:int}kB/nr_hugepages",
            "start cell ${cellno:int} out of range (0-${maxcell:int})",
            "/sys/devices/system/node/node${cellno:int}/hugepages/hugepages-${pagesize:int}kB/nr_hugepages",
            "Unable to allocate ${expect:int} pages. Allocated only ${real:int}",
            "value too large: ${number}"
        ],
        "option_types": {
            "pagesize": "huge_page_size",
            "pagecount": "non_negative",
            "cellno": "cell_number"
        }
    },
    "attach-device": {
        "exclusives": [
            ["current", "live"],
            ["current", "persistent"],
            ["current", "config"]
        ],
        "option_types": {
            "domain": "domain",
            "file": "device_xml"
        }
    },
    "attach-disk": {
        "exclusives": [
            ["current", "live"],
            ["current", "persistent"],
            ["current", "config"]
        ],
        "weight": 10,
        "result_patterns": [
            "(device_definition):${lineno:int}:",
            "${xmlline:  *<.*>}",
            "${pointer:-+\\^}",
            "expecting a pci:0000.00.00.00 address",
            "expecting a scsi:00.00.00 address",
            "expecting an ide:00.00.00 address",
            "rawio or sgio can be used only with device='lun'",
            "disk device='lun' is not supported for bus='${bus}'",
            "unsupported driver name '${driver}' for disk '${source}'",
            "No such file or directory",
            "Cannot access storage file '${source}' (as uid:${uid:int}, gid:${gid:int})",
            "Invalid PCI address ${domain:int}:${bus:int}:${slot:int}.${function:int}. Only PCI domain 0 is available"
        ],
        "option_types": {
            "source": "file",
            "target": "disk_name",
            "sourcetype": "disk_source_type",
            "targetbus": "disk_bus",
            "driver": "disk_driver",
            "subdriver": "disk_sub_driver",
            "address": "disk_address",
            "cache": "disk_cache",
            "serial": "disk_serial",
            "iothread": "disk_iothread",
            "wwn": "wwn",
            "type": "disk_type",
            "mode": "disk_mode"
        }
    },
    "attach-interface": {
        "exclusives": [
            ["current", "live"],
            ["current", "persistent"],
            ["current", "config"]
        ],
        "result_patterns": [
            "(device_definition):${lineno:int}:",
            "${xmlline:  *<.*>}",
            "${pointer:-+\\^}",
            "expected unicast mac address, found multicast '${mac}'"
        ],
        "option_types": {
            "type": "iface_type",
            "inbound": "iface_rate",
            "outbound": "iface_rate",
            "source": "iface_source",
            "script": "xml_string",
            "target": "xml_string",
            "model": "word",
            "mac": "unicast_mac"
        }
    },
    "blkdeviotune": {
        "exclusives": [
            ["total-bytes-sec", "read-bytes-sec"],
            ["total-bytes-sec", "write-bytes-sec"],
            ["total-iops-sec", "read-iops-sec"],
            ["total-iops-sec", "write-iops-sec"],
            ["total-bytes-sec-max", "read-bytes-sec-max"],
            ["total-bytes-sec-max", "write-bytes-sec-max"],
            ["total-iops-sec-max", "read-iops-sec-max"],
            ["total-iops-sec-max", "write-iops-sec-max"],
            ["current", "live"],
            ["current", "config"]
        ],
        "result_patterns": [
            ": {number:int}"
        ],
        "option_types": {
            "device": "exist_disk",
            "total-bytes-sec": "non_negative",
            "read-bytes-sec": "non_negative",
            "write-bytes-sec": "non_negative",
            "total-iops-sec": "non_negative",
            "read-iops-sec": "non_negative",
            "write-iops-sec": "non_negative",
            "total-bytes-sec-max": "non_negative",
            "read-bytes-sec-max": "non_negative",
            "write-bytes-sec-max": "non_negative",
            "total-iops-sec-max": "non_negative",
            "read-iops-sec-max": "non_negative",
            "write-iops-sec-max": "non_negative",
            "size-iops-sec": "non_negative"
        }
    },
    "blkiotune": {
        "exclusives": [
            ["config", "live"],
            ["current", "live"],
            ["current", "config"]
        ],
        "result_patterns": [
            "weight         : ${number}",
            "unable to parse blkio device '${device}' '${value}'",
            "invalid value '${value}' for parameter '${param}' of device '${device}'"
        ],
        "option_types": {
            "device-weights": "disk_count_string",
            "device-read-iops-sec": "disk_count_string",
            "device-write-iops-sec": "disk_count_string",
            "device-read-bytes-sec": "disk_count_string",
            "device-write-bytes-sec": "disk_count_string"
        }
    },
    "blockcommit": {
        "exclusives": [
            ["pivot", "keep-overlay"]
        ],
        "depends": [
            ["async", "wait"],
            ["verbose", "wait"]
        ],
        "result_patterns": [
            "unsupported flags (0x${flagno:int}) in function qemuDomainBlockCommit"
        ],
        "option_types": {
            "domain": "domain",
            "path": "exist_disk"
        }
    },
    "blockcopy": {
        "exclusives": [
            ["dest", "xml"]
        ],
        "depends": [
            ["async", "wait"],
            ["verbose", "wait"]
        ]
    },
    "blockjob": {
        "exclusives": [
            ["abort", "info"],
            ["info", "bandwidth"],
            ["abort", "bandwidth"]
        ]
    },
    "blockpull": {
        "depends": [
            ["async", "wait"],
            ["verbose", "wait"]
        ]
    },
    "change-media": {
        "exclusives": [
            ["current", "live"],
            ["eject", "insert"],
            ["insert", "update"],
            ["eject", "update"]
        ]
    },
    "create": {
        "option_types": {
            "pass-fds": "fd"
        },
        "result_patterns": [
            "Unable to parse FD number '${pass-fds}'"
        ]
    },
    "cpu-stats": {
        "result_patterns": [
            "${number:[.0-9]+} seconds"
        ]
    },
    "define": {
        "option_types": {
            "file": "vm_xml"
        },
        "result_patterns": [
            "domain '${domain}' already exists with uuid ${domuuid}",
            "Domain ${domain} defined from"
        ]
    },
    "desc": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ],
        "result_patterns": [
            "/tmp/virsh${file}.xml"
        ]
    },
    "destroy": {
        "option_types": {
            "domain": "active_domain"
        }
    },
    "detach-device": {
        "exclusives": [
            ["current", "live"],
            ["current", "persistent"],
            ["current", "config"]
        ],
        "option_types": {
            "file": "exist_device_xml"
        }
    },
    "detach-disk": {
        "exclusives": [
            ["current", "live"],
            ["current", "persistent"],
            ["current", "config"]
        ],
        "option_types": {
            "target": "exist_disk"
        }
    },
    "detach-interface": {
        "exclusives": [
            ["current", "live"],
            ["current", "persistent"],
            ["current", "config"]
        ]
    },
    "domid": {
        "result_patterns": [
            "${number:[0-9]+}"
        ]
    },
    "domiflist": {
        "result_patterns": [
            "${mac:[0-9a-z:]{17}}"
        ]
    },
    "domiftune": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ]
    },
    "domifinfo": {
        "result_patterns": [
            "Id:             ${id}",
            "UUID:           ${uuid}",
            "CPU time:       ${cpu-time}",
            "Max memory:     ${number} KiB",
            "Used memory:    ${number} KiB"
        ]
    },
    "domjobinfo": {
        "result_patterns": [
            "Time elapsed:     ${number} ms",
            "Data processed:   ${number} KiB",
            "Data remaining:   ${number} B",
            "Data total:       ${number} MiB",
            "Memory processed: ${number} KiB",
            "Memory remaining: ${number} B",
            "Memory total:     ${number} MiB",
            "Memory bandwidth: ${number} MiB/s",
            "Constant pages:   ${number}",
            "Normal pages:     ${number}",
            "Normal data:      ${number} KiB",
            "Total downtime:   ${number} ms",
            "Setup time:       ${number} ms"
        ]
    },
    "dommemstat": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ]
    },
    "domtime": {
        "exclusives": [
            ["time", "now"],
            ["time", "sync"],
            ["now", "sync"]
        ]
    },
    "domuuid": {
        "result_patterns": [
            "${uuid:[0-9a-f]+}"
        ]
    },
    "dump": {
        "depends": [
            ["format", "memory-only"]
        ]
    },
    "edit": {
        "result_patterns": [
            "/tmp/virsh${file}.xml"
        ]
    },
    "emulatorpin": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ],
        "result_patterns": [
            "Physical CPU ${cpu} doesn't exist"
        ]
    },
    "freecell": {
        "result_patterns": [
            ": ${number} KiB"
        ]
    },
    "freepages": {
        "exclusives": [
            ["all", "cellno"]
        ],
        "result_patterns": [
            "value too large: ${number}",
            "4KiB: ${number}",
            "2048KiB: ${number}"
        ]
    },
    "managedsave": {
        "exclusives": [
            ["running", "paused"]
        ]
    },
    "memtune": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ],
        "result_patterns": [
            "hard_limit     : ${number}",
            "soft_limit     : ${number}",
            "swap_hard_limit: ${number}"
        ]
    },
    "metadata": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"],
            ["edit", "set"],
            ["remove", "set"]
        ]
    },
    "migrate-compcache": {
        "result_patterns": [
            "Compression cache: ${number} MiB"
        ]
    },
    "migrate-getspeed": {
        "result_patterns": [
            "${number:[0-9]+}"
        ]
    },
    "node-memory-tune": {
        "result_patterns": [
            "${number:[0-9]+}"
        ]
    },
    "nodecpustats": {
        "result_patterns": [
            "user:        ${number:[ 0-9]+}",
            "system:      ${number:[ 0-9]+}",
            "idle:        ${number:[ 0-9]+}",
            "iowait:      ${number:[ 0-9]+}",
            "user:        ${percent:[ 0-9%]+}",
            "system:      ${percent:[ 0-9%]+}",
            "idle:        ${percent:[ 0-9%]+}",
            "iowait:      ${percent:[ 0-9%]+}"
        ]
    },
    "nodedev-list": {
        "exclusives": [
            ["tree", "cap"]
        ]
    },
    "nodeinfo": {
        "result_patterns": [
            "CPU model:           ${model}",
            "CPU(s):              ${number}",
            "CPU frequency:       ${number} MHz",
            "CPU socket(s):       ${number}",
            "Core(s) per socket:  ${number}",
            "Thread(s) per core:  ${number}",
            "NUMA cell(s):        ${number}",
            "Memory size:         ${number} KiB"
        ]
    },
    "nodememstats": {
        "result_patterns": [
            ": ${number} KiB"
        ]
    },
    "numatune": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ]
    },
    "pool-build": {
        "exclusives": [
            ["overwrite", "no-overwrite"]
        ]
    },
    "pool-create": {
        "option_types": {
            "file": "pool_xml"
        },
        "result_patterns": [
            "pool '${pool}' already exists with uuid ${domuuid}",
            "Pool ${pool} created from"
        ]
    },
    "pool-define": {
        "option_types": {
            "file": "pool_xml"
        },
        "result_patterns": [
            "pool '${pool}' already exists with uuid ${domuuid}",
            "Pool ${pool} defined from"
        ]
    },
    "pool-delete": {
        "result_patterns": [
            "failed to remove pool '${path}'"
        ]
    },
    "pool-edit": {
        "result_patterns": [
            "/tmp/virsh${file}.xml"
        ]
    },
    "pool-list": {
        "result_patterns": [
            "Invalid pool type '${type}'"
        ]
    },
    "pool-start": {
        "result_patterns": [
            "cannot open path '${path}'"
        ]
    },
    "pool-uuid": {
        "result_patterns": [
            "${uuid:[0-9a-f]+}"
        ]
    },
    "qemu-agent-command": {
        "exclusives": [
            ["timeout", "async"],
            ["timeout", "block"],
            ["async", "block"]
        ]
    },
    "qemu-monitor-command": {
        "exclusives": [
            ["hmp", "pretty"]
        ]
    },
    "reboot": {
        "option_types": {
            "mode": "reboot_mode"
        }
    },
    "save": {
        "exclusives": [
            ["running", "paused"]
        ]
    },
    "save-image-edit": {
        "exclusives": [
            ["running", "paused"]
        ]
    },
    "schedinfo": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ],
        "result_patterns": [
            "invalid scheduler option: ${option}"
        ]
    },
    "setmaxmem": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ]
    },
    "setmem": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ]
    },
    "setvcpus": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"],
            ["guest", "config"]
        ],
        "depends": [
            ["maximum", "config"]
        ],
        "result_patterns": [
            "requested vcpus is greater than max allowable vcpus for the domain: ${count} > ${maxvcpus}"
        ]
    },
    "shutdown": {
        "result_patterns": [
            "Unknown mode ${mode} value"
        ]
    },
    "snapshot-create-as": {
        "exclusives": [
            ["print-xml", "no-metadata"]
        ],
        "depends": [
            ["quiesce", "disk-only"]
        ]
    },
    "snapshot-current": {
        "exclusives": [
            ["name", "snapshotname"]
        ]
    },
    "snapshot-delete": {
        "exclusives": [
            ["snapshotname", "current"]
        ]
    },
    "snapshot-edit": {
        "exclusives": [
            ["rename", "clone"]
        ]
    },
    "snapshot-info": {
        "exclusives": [
            ["snapshotname", "current"]
        ]
    },
    "snapshot-list": {
        "exclusives": [
            ["from", "current"],
            ["parent", "roots"],
            ["roots", "from"],
            ["tree", "name"],
            ["roots", "tree"],
            ["parent", "tree"],
            ["leaves", "tree"],
            ["disk-only", "tree"],
            ["active", "tree"]
        ]
    },
    "snapshot-parent": {
        "exclusives": [
            ["snapshotname", "current"]
        ]
    },
    "snapshot-revert": {
        "exclusives": [
            ["snapshotname", "current"]
        ]
    },
    "start": {
        "option_types": {
            "domain": "inactive_domain",
            "pass-fds": "fd"
        },
        "result_patterns": [
            "Failed to start domain ${domain}",
            "Path '${path}' is not accessible",
            "Cannot access storage file '${source}' (as uid:${uid:int}, gid:${gid:int})",
            "Invalid value '${value}' for '${cgpath}'",
            "Unable to parse FD number '${fds}'"
        ],
        "weight": 5
    },
    "undefine": {
        "exclusives": [
            ["storage", "remove-all-storage"]
        ],
        "depends": [
            ["wipe-storage", "storage"],
            ["wipe-storage", "remove-all-storage"]
        ],
        "optionals": [
            "storage"
        ],
        "result_patterns": [
            "Domain ${domain} has been undefined",
            "Storage volume '${disk}'(${path}) is not managed by libvirt",
            "Volume '${storage}' was not found in domain's definition."
        ]
    },
    "update-device": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"],
            ["current", "persistent"]
        ]
    },
    "vcpucount": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"],
            ["live", "config"],
            ["guest", "config"],
            ["active", "maximum"]
        ],
        "result_patterns": [
            "${number:[0-9]+}"
        ]
    },
    "vcpupin": {
        "exclusives": [
            ["current", "live"],
            ["current", "config"]
        ],
        "depends": [
            ["cpu-list", "vcpu"]
        ]
    },
    "vol-clone": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-create": {
        "option_types": {
            "file": "vol_xml"
        },
        "result_patterns": [
            "Vol ${vol} created from"
        ]
    },
    "vol-delete": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-info": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-key": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-name": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-path": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-pool": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-upload": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    },
    "vol-wipe": {
        "result_patterns": [
            "no storage vol with matching path '${vol}' ($vol-path)"
        ]
    }
}
