#!/usr/bin/env python


import os
import sys
import threading

# simple magic for using scripts within a source tree
base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if os.path.isdir(os.path.join(base_dir, 'virtTrinity')):
    sys.path.insert(0, base_dir)


from virtTrinity import virsh
from virtTrinity import utils
from virtTrinity import server
from virtTrinity import result_manager


def iter_command(command):
    """Iterate through all possible combinated command lines
    for a virsh sub command *command*.

    :param command: A virsh sub command to be iterated.
    :type command: str.
    """
    vsh = virsh.Virsh()
    cmdline_generator = vsh.cmdline_generator(command)
    for counter, cmd_line in enumerate(cmdline_generator):
        print counter,
        result = utils.run(cmd_line, timeout=1.0)
        result.pprint()


def fuzzer(commands=[], excludes=[], timeout=5.0):
    """A fuzzer continuously run random virsh commands.
    """
    # pylint: disable=E1101
    result_mgr = result_manager.ResultManager.Instance()
    vsh = virsh.Virsh()
    try:
        if not commands:
            commands = vsh.commands.keys()

        commands = list(set(commands) - set(excludes))

        if not commands:
            print 'No command for running'
            sys.exit(1)

        counter = 0
        stat = {'total_time': 0, 0: 0, None: 0}
        while True:
            cmd_line = vsh.random_cmdline(commands)
            result = utils.run(cmd_line, timeout=timeout)
            result_mgr.append(result)
            result.pprint()

            counter += 1
            res = result.exit_status
            stat['total_time'] += result.call_time
            if res in stat:
                stat[res] += 1
            else:
                stat[res] = 1
    except KeyboardInterrupt:
        print
        print 'Statistics'
        print '----------'
        print
        print 'Test count   : %s' % counter
        print 'Test time    : %.2f' % stat['total_time']
        print 'Ave call time: %.4f' % (
            (stat['total_time'] - timeout * stat[None]) /
            (counter - stat[None]))
        print 'Success count: %s' % stat[0]
        print 'Success rate : %s' % (stat[0] / float(counter))
        print 'Timeout count: %s' % stat[None]


if __name__ == '__main__':
    http_server = server.Server()
    server_thread = threading.Thread(target=http_server.serve_forever)
    server_thread.start()
    try:
        fuzzer(commands=[], excludes=[])
    finally:
        http_server.shutdown()
        server_thread.join()
