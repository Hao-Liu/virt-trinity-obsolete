#!/usr/bin/env python


import os
import sys
import uuid
import time
import threading

# simple magic for using scripts within a source tree
base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if os.path.isdir(os.path.join(base_dir, 'virtTrinity')):
    sys.path.insert(0, base_dir)


from virtTrinity import virsh   # nopep8
from virtTrinity import utils   # nopep8
from virtTrinity import server  # nopep8
from virtTrinity import client  # nopep8


def iter_command(command):
    """Iterate through all possible combinated command lines
    for a virsh sub command *command*.

    :param command: A virsh sub command to be iterated.
    :type command: str.
    """
    vsh = virsh.Virsh()
    cmdline_generator = vsh.cmdline_generator(command)
    for counter, cmd_line in enumerate(cmdline_generator):
        print counter,
        result = utils.run(cmd_line, timeout=1.0)
        result.pprint()


def fuzzer(commands=[], excludes=[], timeout=5.0):
    """A fuzzer continuously run random virsh commands.
    """
    vsh = virsh.Virsh()
    os.environ["EDITOR"] = "echo"

    if not commands:
        commands = vsh.commands.keys()

    commands = list(set(commands) - set(excludes))

    if not commands:
        print 'No command for running'
        sys.exit(1)

    counter = 0
    n_success = 0
    n_failure = 0
    n_timeout = 0
    n_skip = 0

    cli = client.Client()
    run_id = uuid.uuid4()
    cli.start_run(run_id)
    run_start = time.time()
    gen_time = 0.0
    call_time = 0.0
    send_time = 0.0
    try:
        while True:
            gen_start = time.time()
            cmd = vsh.random_cmd(commands)
            gen_time += time.time() - gen_start
            if 'skip' in cmd.opt_args:
                n_skip += 1
                continue
            result = cmd.run(timeout=timeout)
            call_time += result.call_time
            send_start = time.time()
            cli.send_result(run_id, counter, result)
            send_time += time.time() - send_start

            counter += 1
            res = result.exit_status
            if res == 'success':
                n_success += 1
            elif res == 'failure':
                n_failure += 1
            elif res == 'timeout':
                n_timeout += 1
    except KeyboardInterrupt:
        cli.end_run(run_id)
        print
        print 'Statistics'
        print '----------'
        print
        print 'Test count     : %s' % counter
        print '  Success      : %s' % n_success
        print '  Timeout      : %s' % n_timeout
        print '  Failure      : %s' % n_failure
        print '  Skipped      : %s' % n_skip
        print 'Test time      : %.2f' % (time.time() - run_start)
        print '  Gen time     : %.2f' % gen_time
        print '  Call time    : %.2f' % call_time
        print '  Send time    : %.2f' % send_time
        if counter - n_timeout:
            print '  Ave gen time : %.4f' % (gen_time / (counter + n_skip))
            print '  Ave call time: %.4f' % (
                (call_time - timeout * n_timeout) /
                (counter - n_timeout))
            print '  Ave send time: %.4f' % (send_time / counter)
        if counter:
            print 'Success rate   : %s' % (n_success / float(counter))


if __name__ == '__main__':
    http_server = server.Server()
    server_thread = threading.Thread(target=http_server.serve_forever)
    server_thread.start()
    try:
        fuzzer(commands=[], excludes=[])
    finally:
        http_server.shutdown()
        server_thread.join()
